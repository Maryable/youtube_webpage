/* 전반적으로 쓰이는 요소들을 변수로 정의해서 사용하면 
깔끔하고 consistent함 */

:root {
  /* /color */
  /* 웹사이트를 따라할 때 color picker로 따 오는 경우 정의해 둠. */
  --white-color: #fff;
  --black-color: #140a00;
  --blue-color: #045fd4;
  --red-color: #ff0000;
  --grey-dark-color: #909090;
  --grey-light-color: #e0e0e0;

  /* size */
  --padding: 14px;
  --avatar-size: 36px;

  /* Font Size */
  --font-large: 18px;
  --font-medium: 14px;
  --font-small: 12px;
  --font-micro: 10px;
}

* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  /* 박스 사이즈도 패딩이나 마진을 줬을 때, 
  그 것이 포함되어서 사이즈가 결정되도록 함. */
}

body,
html {
  font-family: "Roboto";
}

button,
button:focus {
  border: none;
  /* 자동 지정되는 테두리 없앰 */
  background-color: var(--white-color);
  cursor: pointer;
  /* 커서 댔을 때 손가락으로 변경 */
  outline: none;
}

/* header */
header {
  display: flex;
  /* flex box로 블럭들을 인라인 요소로 배치 */
  justify-content: space-between;
  /* 헤더의 3요소를 같은 space로 배치 */
  padding: var(--padding);
  background-color: var(--black-color);
  color: var(--white-color);
}

header .logo {
  font-size: var(--font-large);
  margin-right: var(--padding);
}

header .logo i {
  color: var(--red-color);
}

header .icons .fas fa-search {
  margin-right: var(--padding);
}
/* SASS & LESS를 쓰면 헤더끼리 묶어서 CSS를 쓸 수 있음 */
/* react를 쓰면 PostCSS를 쓸 수 있음 */

/* video */
.player {
  text-align: center;
  /* 반응형으로 움직이면서도 1000px 넘어가면 가운데로 배치됨 */
  background-color: var(--black-color);
  /* 비디오와 배경색이 너무 차이나니까 검은색으로 변경 */
  position: sticky;
  /* 페이지를 스크롤링 했을 때 영상이 같은 위치에 붙어있음 */
  top: 0;
  /* sticky를 줬을 때 어디서 붙어있을건지 위치를 주기 위함 */
}
.player video {
  width: 100%;
  height: 100%;
  /* 반응형일 때 자동으로 크기 조절 */
  max-width: 1000px;
  /* 무한정 커지지 않게 최대 크기 한정 */
}

/* video info */
body > .info {
  /* info가 다른 섹션에도 있으므로, 
  body안에 있는 바로 밑의 info에만 
  여백을 주는 것으로 설정  */
  padding: var(--padding);
}

.info .metadata .hashtags {
  display: flex;
  font-size: var(--font-small);
  color: var(--blue-color);
  /* 해시태그도 인라인으로 만들고
  폰트 사이즈와 색상을 준다. */
}

.info .metadata .hashtags li {
  margin-right: var(--padding);
  /* 해시태그가 간격을 두고 
  떨어져있을 수 있도록 패딩을 준다.  */
}

.info .metadata .titleAndButton {
  display: flex;
}

.info .metadata .titleAndButton .title {
  font-size: var(--font-medium);
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  overflow: hidden;
  /* 제목이 너무 길 경우 width사이즈가 줄어도
  2줄만 고정하여 표시하도록 함 */
  margin-right: var(--padding);
}

.info .metadata .titleAndButton .moreBtn {
  height: 100%;
  /* 버튼이 영상제목의 맨 윗줄에 붙게 하기 위해. */
}

.info .views {
  font-size: var(--font-small);
  color: var(--grey-light-color);
}

.info .actions {
  display: flex;
  list-style: none;
  justify-content: space-around;
  /* 각 버튼간 양쪽 간격을 같은 중심축에서 골고루 넣는다 */
  margin: var(--padding);
  /* 버튼,글씨 간격 위아래 간격 준다. */
}

.info .actions button {
  display: flex;
  flex-direction: column;
  /* 아이콘이 위로, 텍스트가 아래로 배치 */
  font-size: var(--font-small);
  color: var(--grey-dark-color);
}

.info .actions button i {
  margin: 0 auto;
  /* 아이콘이 너무 치우쳐져 있기 때문에, 위아래는 0, 
  양쪽은 auto로 주면 중간으로 옴 */
  margin-bottom: calc(var(--padding) / 2);
  /* 설정한 padding값의 반만 주기 */
  font-size: 16px;
}

.info .actions button i.active {
  color: var(--blue-color);
  /* 하나의 아이콘만 색상 변경 */
}

/* Channel Description */
.info .channel {
  display: flex;
  justify-content: space-between;
  /* subscribe 버튼과 채널이름 떨어트리기 */
  border-top: 1px solid var(--grey-light-color);
  border-bottom: 1px solid var(--grey-light-color);
}

.info .channel .metadata {
  display: flex;
  align-items: center;
  /* 아바타 사진이 채널이름+구독자수 글씨 가운데로 */
}

.info .channel .metadata .info {
  display: flex;
  flex-direction: column;
  /* 채널이름과 구독자수 세로정렬 */
}

.info .channel .metadata img {
  width: var(--avatar-size);
  height: var(--avatar-size);
  /* 이미지 크기 조절 */
  border-radius: 50%;
  /* 네모 이미지를 동그랗게 변경 */
}

.info .channel .metadata .info .name {
  font-size: var(--font-medium);
}

.info .channel .metadata .info .subscribers {
  font-size: var(--font-small);
  color: var(--grey-dark-color);
}

.info .channel .supscribe {
  text-transform: uppercase;
  /* subscribe버튼 다 대문자로 */
  color: var(--red-color);
  /* 색상 빨간색으로 변경 */
  font-size: var(--font-medium);
}
/* info end */

/* Up Next */
.upNext {
  padding: 0 var(--padding);
  /* 사이드 패딩을 주어 화면에서 떨어트림 */
}

.upNext > .title {
  /* upNext안의 타이틀 전체가 아니라, 
  upNext의 바로 따라오는 자식만 꾸며주기 위해*/
  font-size: var(--font-large);
  color: var(--grey-dark-color);
  margin-bottom: calc(var(--padding) / 2);
}

.upNext .item {
  display: flex;
  /* 다음동영상의 썸네일, 설명, 뷰수가 일자로 정렬*/
  margin-top: var(--padding);
}
.upNext .item .img img {
  width: 100%;
}
/* 그냥 flex 1 1 35%로 주면 작용 안함.
이미지를 div박스 안에 넣어서 반응형으로 되도록 
width를 100%따로 주면 반응형으로 된다. */

.upNext .item .img {
  flex: 1 1 35%;
  margin-right: var(--padding);
}

.upNext .item .info {
  flex: 1 1 60%;
}

.upNext .item .moreBtn {
  flex: 1 1 5%;
}

.upNext .item .info {
  display: flex;
  flex-direction: column;
}

.upNext .item .info .title {
  font-size: var(--font-small);
}
.upNext .item .info .name,
.upNext .item .info .views {
  font-size: var(--font-micro);
  color: var(--grey-dark-color);
}

.infoAndupNext {
  display: flex;
  flex-direction: column;
}

@media screen and (min-width: 768px) {
  .infoAndupNext {
    flex-direction: row;
    margin: var(--padding);
  }
}
/* 화면이 768로 작아지면 채널정보와 비디오정보가 
아래로 내려가고, upnext부분이 오른쪽으로 이동 */
